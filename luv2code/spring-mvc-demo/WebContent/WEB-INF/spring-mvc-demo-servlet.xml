<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
        xmlns:context="http://www.springframework.org/schema/context" 
        xmlns:mvc="http://www.springframework.org/schema/mvc" 
        xmlns:util="http://www.springframework.org/schema/util" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:schemaLocation="
            http://www.springframework.org/schema/beans     
            http://www.springframework.org/schema/beans/spring-beans.xsd     
            http://www.springframework.org/schema/context     
            http://www.springframework.org/schema/context/spring-context.xsd     
            http://www.springframework.org/schema/mvc         
            http://www.springframework.org/schema/mvc/spring-mvc.xsd 
            http://www.springframework.org/schema/util     
            http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- Step 3: Add support for component scanning -->
	<!-- Spring will recursively scan for components starting at the base package: 
		 "com.luv2code.springdemo"
		 When I say "recursive", it means that Spring will start at the base package 
		 and scan all sub packages. -->
	<context:component-scan base-package="com.luv2code.springdemo" />

	<!-- Step 4: Add support for conversion, formatting and validation support -->
	<mvc:annotation-driven/>

	<!-- Step 5: Define Spring MVC view resolver. This will tell the actual view address. DispatcherServlet
				 will make use of this internally. -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!--
		Any static resource is processed as a URL Mapping in Spring MVC. You can configure 
		references to static resources in the spring-mvc-demo-servlet.xml  
		
		Step 1: Add the "resources" entry to your Spring MVC configuration file: 
					spring-mvc-demo-servlet.xml (like below entry)
		
		Step 2: Now in your view pages, you can access the static files using this syntax:	
		<img src="${pageContext.request.contextPath}/resources/images/spring-logo.png">
	-->
	
	<!-- location="/" means "WebContent" folder because that is considered as the root 
		 directory of dynamic java web project. -->
	<mvc:resources mapping="/resources/**" location="/resources/"></mvc:resources>
	
	<!-- Load the country options properties file in the Spring config file. 
		 Bean id: countryOptions. In dynamic java web project, "lib" folder is considered as
		 the classpath. So ".." means previous directory of the classpath, which is
		 WEB-INF. So that's why location is given like below.  -->
	<util:properties id="countryOptions" location="classpath:../countries.properties" />


	<!-- Load custom message resources i.e to override some standard error codes.  -->
	<bean id = "messageSource" 
		class = "org.springframework.context.support.ResourceBundleMessageSource">
		<!-- In order to specify the location of properties file, we need to set this
			 below property of messageSource bean. Then spring will load 
			 "src/resources/messages.properties" file. -->
		<property name="basenames" value="resources/messages" />
	
	</bean>
	
</beans>





